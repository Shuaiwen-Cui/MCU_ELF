
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001be8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e80  08001e80  00002e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e90  08001e90  00002e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e94  08001e94  00002e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001e98  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001ea8  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001ea8  00003030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000791c  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000142c  00000000  00000000  0000a95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000628  00000000  00000000  0000bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000480  00000000  00000000  0000c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000346c3  00000000  00000000  0000c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000859e  00000000  00000000  00040ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014d98b  00000000  00000000  00049491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00196e1c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001708  00000000  00000000  00196e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000093  00000000  00000000  00198568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001e68 	.word	0x08001e68

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001e68 	.word	0x08001e68

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <MX_GPIO_Init+0x80>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80002f4:	4a18      	ldr	r2, [pc, #96]	@ (8000358 <MX_GPIO_Init+0x80>)
 80002f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <MX_GPIO_Init+0x80>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <MX_GPIO_Init+0x80>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000312:	4a11      	ldr	r2, [pc, #68]	@ (8000358 <MX_GPIO_Init+0x80>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800031c:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_GPIO_Init+0x80>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2180      	movs	r1, #128	@ 0x80
 800032e:	480b      	ldr	r0, [pc, #44]	@ (800035c <MX_GPIO_Init+0x84>)
 8000330:	f000 fd90 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000334:	2380      	movs	r3, #128	@ 0x80
 8000336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	2301      	movs	r3, #1
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800033c:	2301      	movs	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000340:	2303      	movs	r3, #3
 8000342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	4619      	mov	r1, r3
 800034a:	4804      	ldr	r0, [pc, #16]	@ (800035c <MX_GPIO_Init+0x84>)
 800034c:	f000 fbd2 	bl	8000af4 <HAL_GPIO_Init>

}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	58024400 	.word	0x58024400
 800035c:	58021c00 	.word	0x58021c00

08000360 <Delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Delay(__IO uint32_t nCount);
void Delay(__IO uint32_t nCount)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	while(nCount--){}
 8000368:	bf00      	nop
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	1e5a      	subs	r2, r3, #1
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d1fa      	bne.n	800036a <Delay+0xa>
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b3e      	ldr	r3, [pc, #248]	@ (8000484 <main+0x100>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b38      	ldr	r3, [pc, #224]	@ (8000484 <main+0x100>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b33      	ldr	r3, [pc, #204]	@ (8000484 <main+0x100>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a32      	ldr	r2, [pc, #200]	@ (8000484 <main+0x100>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000484 <main+0x100>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b29      	ldr	r3, [pc, #164]	@ (8000484 <main+0x100>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b26      	ldr	r3, [pc, #152]	@ (8000484 <main+0x100>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80003f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	491b      	ldr	r1, [pc, #108]	@ (8000484 <main+0x100>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x82>
    } while(sets-- != 0U);
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <main+0x100>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <main+0x100>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 f9ce 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f81a 	bl	800048c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f7ff ff3e 	bl	80002d8 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
	    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET); // PH7 OFF
 800045c:	2201      	movs	r2, #1
 800045e:	2180      	movs	r1, #128	@ 0x80
 8000460:	4809      	ldr	r0, [pc, #36]	@ (8000488 <main+0x104>)
 8000462:	f000 fcf7 	bl	8000e54 <HAL_GPIO_WritePin>
	    Delay(0x1FFFFFF);
 8000466:	f06f 407e 	mvn.w	r0, #4261412864	@ 0xfe000000
 800046a:	f7ff ff79 	bl	8000360 <Delay>
	    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET); // PH7 ON
 800046e:	2200      	movs	r2, #0
 8000470:	2180      	movs	r1, #128	@ 0x80
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <main+0x104>)
 8000474:	f000 fcee 	bl	8000e54 <HAL_GPIO_WritePin>
	    Delay(0x1FFFFFF);
 8000478:	f06f 407e 	mvn.w	r0, #4261412864	@ 0xfe000000
 800047c:	f7ff ff70 	bl	8000360 <Delay>
	    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET); // PH7 OFF
 8000480:	bf00      	nop
 8000482:	e7eb      	b.n	800045c <main+0xd8>
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	58021c00 	.word	0x58021c00

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b09e      	sub	sp, #120	@ 0x78
 8000490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000496:	224c      	movs	r2, #76	@ 0x4c
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fcb8 	bl	8001e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a0:	f107 030c 	add.w	r3, r7, #12
 80004a4:	2220      	movs	r2, #32
 80004a6:	2100      	movs	r1, #0
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 fcb1 	bl	8001e10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004ae:	2002      	movs	r0, #2
 80004b0:	f000 fcea 	bl	8000e88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	4b49      	ldr	r3, [pc, #292]	@ (80005e0 <SystemClock_Config+0x154>)
 80004ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004bc:	4a48      	ldr	r2, [pc, #288]	@ (80005e0 <SystemClock_Config+0x154>)
 80004be:	f023 0301 	bic.w	r3, r3, #1
 80004c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004c4:	4b46      	ldr	r3, [pc, #280]	@ (80005e0 <SystemClock_Config+0x154>)
 80004c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	4b45      	ldr	r3, [pc, #276]	@ (80005e4 <SystemClock_Config+0x158>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a44      	ldr	r2, [pc, #272]	@ (80005e4 <SystemClock_Config+0x158>)
 80004d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b42      	ldr	r3, [pc, #264]	@ (80005e4 <SystemClock_Config+0x158>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e6:	bf00      	nop
 80004e8:	4b3e      	ldr	r3, [pc, #248]	@ (80005e4 <SystemClock_Config+0x158>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004f4:	d1f8      	bne.n	80004e8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b3c      	ldr	r3, [pc, #240]	@ (80005e8 <SystemClock_Config+0x15c>)
 80004f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80004fc:	4a3a      	ldr	r2, [pc, #232]	@ (80005e8 <SystemClock_Config+0x15c>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000506:	4b38      	ldr	r3, [pc, #224]	@ (80005e8 <SystemClock_Config+0x15c>)
 8000508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800050c:	f003 0302 	and.w	r3, r3, #2
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	4b32      	ldr	r3, [pc, #200]	@ (80005e4 <SystemClock_Config+0x158>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a31      	ldr	r2, [pc, #196]	@ (80005e4 <SystemClock_Config+0x158>)
 800051e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b2f      	ldr	r3, [pc, #188]	@ (80005e4 <SystemClock_Config+0x158>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	4b2c      	ldr	r3, [pc, #176]	@ (80005e0 <SystemClock_Config+0x154>)
 8000530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000532:	4a2b      	ldr	r2, [pc, #172]	@ (80005e0 <SystemClock_Config+0x154>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800053a:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <SystemClock_Config+0x154>)
 800053c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000546:	bf00      	nop
 8000548:	4b26      	ldr	r3, [pc, #152]	@ (80005e4 <SystemClock_Config+0x158>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000554:	d1f8      	bne.n	8000548 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800055a:	2301      	movs	r3, #1
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2340      	movs	r3, #64	@ 0x40
 8000560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	2300      	movs	r3, #0
 8000568:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056a:	2304      	movs	r3, #4
 800056c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800056e:	233c      	movs	r3, #60	@ 0x3c
 8000570:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000572:	2302      	movs	r3, #2
 8000574:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000576:	2302      	movs	r3, #2
 8000578:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800057a:	2302      	movs	r3, #2
 800057c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800057e:	230c      	movs	r3, #12
 8000580:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000582:	2300      	movs	r3, #0
 8000584:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fcb4 	bl	8000efc <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800059a:	f000 f827 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2303      	movs	r3, #3
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005ae:	2340      	movs	r3, #64	@ 0x40
 80005b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005b2:	2340      	movs	r3, #64	@ 0x40
 80005b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005bc:	2340      	movs	r3, #64	@ 0x40
 80005be:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f8f2 	bl	80017b0 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80005d2:	f000 f80b 	bl	80005ec <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3778      	adds	r7, #120	@ 0x78
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	58000400 	.word	0x58000400
 80005e4:	58024800 	.word	0x58024800
 80005e8:	58024400 	.word	0x58024400

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <Error_Handler+0x8>

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_MspInit+0x30>)
 8000600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000604:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <HAL_MspInit+0x30>)
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_MspInit+0x30>)
 8000610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	58024400 	.word	0x58024400

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <NMI_Handler+0x4>

08000634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <MemManage_Handler+0x4>

08000644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <UsageFault_Handler+0x4>

08000654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 f927 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0xe4>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000696:	4a36      	ldr	r2, [pc, #216]	@ (8000770 <SystemInit+0xe4>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b34      	ldr	r3, [pc, #208]	@ (8000774 <SystemInit+0xe8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0xe8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000774 <SystemInit+0xe8>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <SystemInit+0xec>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000778 <SystemInit+0xec>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <SystemInit+0xec>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <SystemInit+0xec>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4929      	ldr	r1, [pc, #164]	@ (8000778 <SystemInit+0xec>)
 80006d4:	4b29      	ldr	r3, [pc, #164]	@ (800077c <SystemInit+0xf0>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <SystemInit+0xe8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0xe8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <SystemInit+0xe8>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <SystemInit+0xec>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <SystemInit+0xec>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <SystemInit+0xec>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <SystemInit+0xec>)
 800070a:	4a1d      	ldr	r2, [pc, #116]	@ (8000780 <SystemInit+0xf4>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <SystemInit+0xec>)
 8000710:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0xf8>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <SystemInit+0xec>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <SystemInit+0xfc>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <SystemInit+0xec>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <SystemInit+0xec>)
 8000722:	4a19      	ldr	r2, [pc, #100]	@ (8000788 <SystemInit+0xfc>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <SystemInit+0xec>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <SystemInit+0xec>)
 800072e:	4a16      	ldr	r2, [pc, #88]	@ (8000788 <SystemInit+0xfc>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <SystemInit+0xec>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <SystemInit+0xec>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <SystemInit+0xec>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <SystemInit+0xec>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <SystemInit+0x100>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <SystemInit+0x104>)
 8000750:	4013      	ands	r3, r2
 8000752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000756:	d202      	bcs.n	800075e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <SystemInit+0x108>)
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <SystemInit+0x10c>)
 8000760:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000764:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	52002000 	.word	0x52002000
 8000778:	58024400 	.word	0x58024400
 800077c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000780:	02020200 	.word	0x02020200
 8000784:	01ff0000 	.word	0x01ff0000
 8000788:	01010280 	.word	0x01010280
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a0:	f7ff ff74 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	@ (80007dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	@ (80007e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f001 fb29 	bl	8001e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ce:	f7ff fdd9 	bl	8000384 <main>
  bx  lr
 80007d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007dc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007e0:	08001e98 	.word	0x08001e98
  ldr r2, =_sbss
 80007e4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007e8:	24000030 	.word	0x24000030

080007ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC3_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f6:	2003      	movs	r0, #3
 80007f8:	f000 f94a 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007fc:	f001 f98e 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8000800:	4602      	mov	r2, r0
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_Init+0x68>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	4913      	ldr	r1, [pc, #76]	@ (800085c <HAL_Init+0x6c>)
 800080e:	5ccb      	ldrb	r3, [r1, r3]
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	fa22 f303 	lsr.w	r3, r2, r3
 8000818:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_Init+0x68>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <HAL_Init+0x6c>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	f003 031f 	and.w	r3, r3, #31
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	fa22 f303 	lsr.w	r3, r2, r3
 8000830:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <HAL_Init+0x70>)
 8000832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000834:	4a0b      	ldr	r2, [pc, #44]	@ (8000864 <HAL_Init+0x74>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800083a:	200f      	movs	r0, #15
 800083c:	f000 f814 	bl	8000868 <HAL_InitTick>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e002      	b.n	8000850 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800084a:	f7ff fed5 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	58024400 	.word	0x58024400
 800085c:	08001e80 	.word	0x08001e80
 8000860:	24000004 	.word	0x24000004
 8000864:	24000000 	.word	0x24000000

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <HAL_InitTick+0x60>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e021      	b.n	80008c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <HAL_InitTick+0x64>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_InitTick+0x60>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f921 	bl	8000ada <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f8f9 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	@ (80008d0 <HAL_InitTick+0x68>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2400000c 	.word	0x2400000c
 80008cc:	24000000 	.word	0x24000000
 80008d0:	24000008 	.word	0x24000008

080008d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_IncTick+0x20>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_IncTick+0x24>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <HAL_IncTick+0x24>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	2400000c 	.word	0x2400000c
 80008f8:	2400002c 	.word	0x2400002c

080008fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <HAL_GetTick+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2400002c 	.word	0x2400002c

08000914 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000918:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <HAL_GetREVID+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	0c1b      	lsrs	r3, r3, #16
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	5c001000 	.word	0x5c001000

0800092c <__NVIC_SetPriorityGrouping>:
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <__NVIC_SetPriorityGrouping+0x40>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	4313      	orrs	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	@ (800096c <__NVIC_SetPriorityGrouping+0x40>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	05fa0000 	.word	0x05fa0000

08000974 <__NVIC_GetPriorityGrouping>:
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	@ (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_SetPriority>:
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	@ (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	@ (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	@ 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	@ 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff8e 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff47 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff5e 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff90 	bl	80009e4 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5f 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffb2 	bl	8000a4c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	@ 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b02:	4b89      	ldr	r3, [pc, #548]	@ (8000d28 <HAL_GPIO_Init+0x234>)
 8000b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b06:	e194      	b.n	8000e32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8186 	beq.w	8000e2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d005      	beq.n	8000b38 <HAL_GPIO_Init+0x44>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d130      	bne.n	8000b9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2203      	movs	r2, #3
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	f003 0201 	and.w	r2, r3, #1
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d017      	beq.n	8000bd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d123      	bne.n	8000c2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3208      	adds	r2, #8
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	08da      	lsrs	r2, r3, #3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3208      	adds	r2, #8
 8000c24:	69b9      	ldr	r1, [r7, #24]
 8000c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0203 	and.w	r2, r3, #3
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 80e0 	beq.w	8000e2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <HAL_GPIO_Init+0x238>)
 8000c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c72:	4a2e      	ldr	r2, [pc, #184]	@ (8000d2c <HAL_GPIO_Init+0x238>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <HAL_GPIO_Init+0x238>)
 8000c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c8a:	4a29      	ldr	r2, [pc, #164]	@ (8000d30 <HAL_GPIO_Init+0x23c>)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a20      	ldr	r2, [pc, #128]	@ (8000d34 <HAL_GPIO_Init+0x240>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d052      	beq.n	8000d5c <HAL_GPIO_Init+0x268>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d38 <HAL_GPIO_Init+0x244>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d031      	beq.n	8000d22 <HAL_GPIO_Init+0x22e>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <HAL_GPIO_Init+0x248>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d02b      	beq.n	8000d1e <HAL_GPIO_Init+0x22a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d40 <HAL_GPIO_Init+0x24c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d025      	beq.n	8000d1a <HAL_GPIO_Init+0x226>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d44 <HAL_GPIO_Init+0x250>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d01f      	beq.n	8000d16 <HAL_GPIO_Init+0x222>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d48 <HAL_GPIO_Init+0x254>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d019      	beq.n	8000d12 <HAL_GPIO_Init+0x21e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d4c <HAL_GPIO_Init+0x258>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d013      	beq.n	8000d0e <HAL_GPIO_Init+0x21a>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	@ (8000d50 <HAL_GPIO_Init+0x25c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d00d      	beq.n	8000d0a <HAL_GPIO_Init+0x216>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <HAL_GPIO_Init+0x260>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d007      	beq.n	8000d06 <HAL_GPIO_Init+0x212>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a17      	ldr	r2, [pc, #92]	@ (8000d58 <HAL_GPIO_Init+0x264>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d101      	bne.n	8000d02 <HAL_GPIO_Init+0x20e>
 8000cfe:	2309      	movs	r3, #9
 8000d00:	e02d      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d02:	230a      	movs	r3, #10
 8000d04:	e02b      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d06:	2308      	movs	r3, #8
 8000d08:	e029      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	e027      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d0e:	2306      	movs	r3, #6
 8000d10:	e025      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d12:	2305      	movs	r3, #5
 8000d14:	e023      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d16:	2304      	movs	r3, #4
 8000d18:	e021      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e01f      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e01d      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e01b      	b.n	8000d5e <HAL_GPIO_Init+0x26a>
 8000d26:	bf00      	nop
 8000d28:	58000080 	.word	0x58000080
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58000400 	.word	0x58000400
 8000d34:	58020000 	.word	0x58020000
 8000d38:	58020400 	.word	0x58020400
 8000d3c:	58020800 	.word	0x58020800
 8000d40:	58020c00 	.word	0x58020c00
 8000d44:	58021000 	.word	0x58021000
 8000d48:	58021400 	.word	0x58021400
 8000d4c:	58021800 	.word	0x58021800
 8000d50:	58021c00 	.word	0x58021c00
 8000d54:	58022000 	.word	0x58022000
 8000d58:	58022400 	.word	0x58022400
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	f002 0203 	and.w	r2, r2, #3
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	4093      	lsls	r3, r2
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d6e:	4938      	ldr	r1, [pc, #224]	@ (8000e50 <HAL_GPIO_Init+0x35c>)
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000dd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f47f ae63 	bne.w	8000b08 <HAL_GPIO_Init+0x14>
  }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3724      	adds	r7, #36	@ 0x24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	58000400 	.word	0x58000400

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	619a      	str	r2, [r3, #24]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00a      	beq.n	8000eb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d001      	beq.n	8000eae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e01f      	b.n	8000eee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e01d      	b.n	8000eee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	f023 0207 	bic.w	r2, r3, #7
 8000eba:	490f      	ldr	r1, [pc, #60]	@ (8000ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000ec2:	f7ff fd1b 	bl	80008fc <HAL_GetTick>
 8000ec6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ec8:	e009      	b.n	8000ede <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000eca:	f7ff fd17 	bl	80008fc <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ed8:	d901      	bls.n	8000ede <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e007      	b.n	8000eee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eea:	d1ee      	bne.n	8000eca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	58024800 	.word	0x58024800

08000efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f000 bc48 	b.w	80017a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 8088 	beq.w	800102e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1e:	4b99      	ldr	r3, [pc, #612]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f28:	4b96      	ldr	r3, [pc, #600]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	d007      	beq.n	8000f44 <HAL_RCC_OscConfig+0x48>
 8000f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f36:	2b18      	cmp	r3, #24
 8000f38:	d111      	bne.n	8000f5e <HAL_RCC_OscConfig+0x62>
 8000f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d10c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	4b8f      	ldr	r3, [pc, #572]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d06d      	beq.n	800102c <HAL_RCC_OscConfig+0x130>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d169      	bne.n	800102c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f000 bc21 	b.w	80017a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f66:	d106      	bne.n	8000f76 <HAL_RCC_OscConfig+0x7a>
 8000f68:	4b86      	ldr	r3, [pc, #536]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a85      	ldr	r2, [pc, #532]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e02e      	b.n	8000fd4 <HAL_RCC_OscConfig+0xd8>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x9c>
 8000f7e:	4b81      	ldr	r3, [pc, #516]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a80      	ldr	r2, [pc, #512]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b7e      	ldr	r3, [pc, #504]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e01d      	b.n	8000fd4 <HAL_RCC_OscConfig+0xd8>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0xc0>
 8000fa2:	4b78      	ldr	r3, [pc, #480]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a77      	ldr	r2, [pc, #476]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b75      	ldr	r3, [pc, #468]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a74      	ldr	r2, [pc, #464]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e00b      	b.n	8000fd4 <HAL_RCC_OscConfig+0xd8>
 8000fbc:	4b71      	ldr	r3, [pc, #452]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a70      	ldr	r2, [pc, #448]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b6e      	ldr	r3, [pc, #440]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a6d      	ldr	r2, [pc, #436]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fc8e 	bl	80008fc <HAL_GetTick>
 8000fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fc8a 	bl	80008fc <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	@ 0x64
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e3d4      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCC_OscConfig+0xe8>
 8001002:	e014      	b.n	800102e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001004:	f7ff fc7a 	bl	80008fc <HAL_GetTick>
 8001008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fc76 	bl	80008fc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	@ 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e3c0      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800101e:	4b59      	ldr	r3, [pc, #356]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x110>
 800102a:	e000      	b.n	800102e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 80ca 	beq.w	80011d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103c:	4b51      	ldr	r3, [pc, #324]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001044:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001046:	4b4f      	ldr	r3, [pc, #316]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8001048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_RCC_OscConfig+0x166>
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	2b18      	cmp	r3, #24
 8001056:	d156      	bne.n	8001106 <HAL_RCC_OscConfig+0x20a>
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d151      	bne.n	8001106 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001062:	4b48      	ldr	r3, [pc, #288]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_RCC_OscConfig+0x17e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e392      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800107a:	4b42      	ldr	r3, [pc, #264]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 0219 	bic.w	r2, r3, #25
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	493f      	ldr	r1, [pc, #252]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8001088:	4313      	orrs	r3, r2
 800108a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fc36 	bl	80008fc <HAL_GetTick>
 8001090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fc32 	bl	80008fc <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e37c      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010a6:	4b37      	ldr	r3, [pc, #220]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	f7ff fc2f 	bl	8000914 <HAL_GetREVID>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80010bc:	4293      	cmp	r3, r2
 80010be:	d817      	bhi.n	80010f0 <HAL_RCC_OscConfig+0x1f4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b40      	cmp	r3, #64	@ 0x40
 80010c6:	d108      	bne.n	80010da <HAL_RCC_OscConfig+0x1de>
 80010c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80010d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 80010d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d8:	e07a      	b.n	80011d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	031b      	lsls	r3, r3, #12
 80010e8:	4926      	ldr	r1, [pc, #152]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ee:	e06f      	b.n	80011d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	061b      	lsls	r3, r3, #24
 80010fe:	4921      	ldr	r1, [pc, #132]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001104:	e064      	b.n	80011d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d047      	beq.n	800119e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 0219 	bic.w	r2, r3, #25
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	491a      	ldr	r1, [pc, #104]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fbec 	bl	80008fc <HAL_GetTick>
 8001124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fbe8 	bl	80008fc <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e332      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800113a:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001146:	f7ff fbe5 	bl	8000914 <HAL_GetREVID>
 800114a:	4603      	mov	r3, r0
 800114c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001150:	4293      	cmp	r3, r2
 8001152:	d819      	bhi.n	8001188 <HAL_RCC_OscConfig+0x28c>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b40      	cmp	r3, #64	@ 0x40
 800115a:	d108      	bne.n	800116e <HAL_RCC_OscConfig+0x272>
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116a:	6053      	str	r3, [r2, #4]
 800116c:	e030      	b.n	80011d0 <HAL_RCC_OscConfig+0x2d4>
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	031b      	lsls	r3, r3, #12
 800117c:	4901      	ldr	r1, [pc, #4]	@ (8001184 <HAL_RCC_OscConfig+0x288>)
 800117e:	4313      	orrs	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
 8001182:	e025      	b.n	80011d0 <HAL_RCC_OscConfig+0x2d4>
 8001184:	58024400 	.word	0x58024400
 8001188:	4b9a      	ldr	r3, [pc, #616]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	061b      	lsls	r3, r3, #24
 8001196:	4997      	ldr	r1, [pc, #604]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
 800119c:	e018      	b.n	80011d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b95      	ldr	r3, [pc, #596]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a94      	ldr	r2, [pc, #592]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fba7 	bl	80008fc <HAL_GetTick>
 80011ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fba3 	bl	80008fc <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e2ed      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011c4:	4b8b      	ldr	r3, [pc, #556]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f0      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80a9 	beq.w	8001330 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011de:	4b85      	ldr	r3, [pc, #532]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011e8:	4b82      	ldr	r3, [pc, #520]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d007      	beq.n	8001204 <HAL_RCC_OscConfig+0x308>
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2b18      	cmp	r3, #24
 80011f8:	d13a      	bne.n	8001270 <HAL_RCC_OscConfig+0x374>
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d135      	bne.n	8001270 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001204:	4b7b      	ldr	r3, [pc, #492]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_RCC_OscConfig+0x320>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2b80      	cmp	r3, #128	@ 0x80
 8001216:	d001      	beq.n	800121c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e2c1      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800121c:	f7ff fb7a 	bl	8000914 <HAL_GetREVID>
 8001220:	4603      	mov	r3, r0
 8001222:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001226:	4293      	cmp	r3, r2
 8001228:	d817      	bhi.n	800125a <HAL_RCC_OscConfig+0x35e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	2b20      	cmp	r3, #32
 8001230:	d108      	bne.n	8001244 <HAL_RCC_OscConfig+0x348>
 8001232:	4b70      	ldr	r3, [pc, #448]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800123a:	4a6e      	ldr	r2, [pc, #440]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800123c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001240:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001242:	e075      	b.n	8001330 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001244:	4b6b      	ldr	r3, [pc, #428]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	069b      	lsls	r3, r3, #26
 8001252:	4968      	ldr	r1, [pc, #416]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001258:	e06a      	b.n	8001330 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800125a:	4b66      	ldr	r3, [pc, #408]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	061b      	lsls	r3, r3, #24
 8001268:	4962      	ldr	r1, [pc, #392]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800126a:	4313      	orrs	r3, r2
 800126c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800126e:	e05f      	b.n	8001330 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d042      	beq.n	80012fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001278:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a5d      	ldr	r2, [pc, #372]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800127e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fb3a 	bl	80008fc <HAL_GetTick>
 8001288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800128c:	f7ff fb36 	bl	80008fc <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e280      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800129e:	4b55      	ldr	r3, [pc, #340]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012aa:	f7ff fb33 	bl	8000914 <HAL_GetREVID>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d817      	bhi.n	80012e8 <HAL_RCC_OscConfig+0x3ec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	2b20      	cmp	r3, #32
 80012be:	d108      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3d6>
 80012c0:	4b4c      	ldr	r3, [pc, #304]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80012c8:	4a4a      	ldr	r2, [pc, #296]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80012ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80012ce:	6053      	str	r3, [r2, #4]
 80012d0:	e02e      	b.n	8001330 <HAL_RCC_OscConfig+0x434>
 80012d2:	4b48      	ldr	r3, [pc, #288]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	069b      	lsls	r3, r3, #26
 80012e0:	4944      	ldr	r1, [pc, #272]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
 80012e6:	e023      	b.n	8001330 <HAL_RCC_OscConfig+0x434>
 80012e8:	4b42      	ldr	r3, [pc, #264]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	493f      	ldr	r1, [pc, #252]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
 80012fc:	e018      	b.n	8001330 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80012fe:	4b3d      	ldr	r3, [pc, #244]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a3c      	ldr	r2, [pc, #240]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff faf7 	bl	80008fc <HAL_GetTick>
 800130e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001312:	f7ff faf3 	bl	80008fc <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e23d      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001324:	4b33      	ldr	r3, [pc, #204]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d036      	beq.n	80013aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d019      	beq.n	8001378 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001348:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fad4 	bl	80008fc <HAL_GetTick>
 8001354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fad0 	bl	80008fc <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e21a      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x45c>
 8001376:	e018      	b.n	80013aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800137a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800137c:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff faba 	bl	80008fc <HAL_GetTick>
 8001388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fab6 	bl	80008fc <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e200      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d039      	beq.n	800142a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0c      	ldr	r2, [pc, #48]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fa97 	bl	80008fc <HAL_GetTick>
 80013ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d2:	f7ff fa93 	bl	80008fc <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1dd      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4d6>
 80013f0:	e01b      	b.n	800142a <HAL_RCC_OscConfig+0x52e>
 80013f2:	bf00      	nop
 80013f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a9a      	ldr	r2, [pc, #616]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80013fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001402:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001404:	f7ff fa7a 	bl	80008fc <HAL_GetTick>
 8001408:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800140c:	f7ff fa76 	bl	80008fc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1c0      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800141e:	4b92      	ldr	r3, [pc, #584]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8081 	beq.w	800153a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001438:	4b8c      	ldr	r3, [pc, #560]	@ (800166c <HAL_RCC_OscConfig+0x770>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a8b      	ldr	r2, [pc, #556]	@ (800166c <HAL_RCC_OscConfig+0x770>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001442:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001444:	f7ff fa5a 	bl	80008fc <HAL_GetTick>
 8001448:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144c:	f7ff fa56 	bl	80008fc <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1a0      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800145e:	4b83      	ldr	r3, [pc, #524]	@ (800166c <HAL_RCC_OscConfig+0x770>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x584>
 8001472:	4b7d      	ldr	r3, [pc, #500]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001476:	4a7c      	ldr	r2, [pc, #496]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6713      	str	r3, [r2, #112]	@ 0x70
 800147e:	e02d      	b.n	80014dc <HAL_RCC_OscConfig+0x5e0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5a6>
 8001488:	4b77      	ldr	r3, [pc, #476]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148c:	4a76      	ldr	r2, [pc, #472]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6713      	str	r3, [r2, #112]	@ 0x70
 8001494:	4b74      	ldr	r3, [pc, #464]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001498:	4a73      	ldr	r2, [pc, #460]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 800149a:	f023 0304 	bic.w	r3, r3, #4
 800149e:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a0:	e01c      	b.n	80014dc <HAL_RCC_OscConfig+0x5e0>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x5c8>
 80014aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x5e0>
 80014c4:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c8:	4a67      	ldr	r2, [pc, #412]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d0:	4b65      	ldr	r3, [pc, #404]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d4:	4a64      	ldr	r2, [pc, #400]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d015      	beq.n	8001510 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa0a 	bl	80008fc <HAL_GetTick>
 80014e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fa06 	bl	80008fc <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e14e      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001502:	4b59      	ldr	r3, [pc, #356]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ee      	beq.n	80014ec <HAL_RCC_OscConfig+0x5f0>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff f9f4 	bl	80008fc <HAL_GetTick>
 8001514:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff f9f0 	bl	80008fc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e138      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800152e:	4b4e      	ldr	r3, [pc, #312]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ee      	bne.n	8001518 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 812d 	beq.w	800179e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001544:	4b48      	ldr	r3, [pc, #288]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800154c:	2b18      	cmp	r3, #24
 800154e:	f000 80bd 	beq.w	80016cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001556:	2b02      	cmp	r3, #2
 8001558:	f040 809e 	bne.w	8001698 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b42      	ldr	r3, [pc, #264]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a41      	ldr	r2, [pc, #260]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff f9c8 	bl	80008fc <HAL_GetTick>
 800156c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff f9c4 	bl	80008fc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e10e      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001582:	4b39      	ldr	r3, [pc, #228]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158e:	4b36      	ldr	r3, [pc, #216]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001592:	4b37      	ldr	r3, [pc, #220]	@ (8001670 <HAL_RCC_OscConfig+0x774>)
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	430a      	orrs	r2, r1
 80015a2:	4931      	ldr	r1, [pc, #196]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	3b01      	subs	r3, #1
 80015ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b6:	3b01      	subs	r3, #1
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c2:	3b01      	subs	r3, #1
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d0:	3b01      	subs	r3, #1
 80015d2:	061b      	lsls	r3, r3, #24
 80015d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80015d8:	4923      	ldr	r1, [pc, #140]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80015de:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80015e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e2:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80015ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80015ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_RCC_OscConfig+0x778>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015f6:	00d2      	lsls	r2, r2, #3
 80015f8:	491b      	ldr	r1, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	f023 020c 	bic.w	r2, r3, #12
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4917      	ldr	r1, [pc, #92]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 800160c:	4313      	orrs	r3, r2
 800160e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001614:	f023 0202 	bic.w	r2, r3, #2
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161c:	4912      	ldr	r1, [pc, #72]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 800161e:	4313      	orrs	r3, r2
 8001620:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800162c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	4a0d      	ldr	r2, [pc, #52]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 800163c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164a:	4a07      	ldr	r2, [pc, #28]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_RCC_OscConfig+0x76c>)
 8001658:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800165c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff f94d 	bl	80008fc <HAL_GetTick>
 8001662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001664:	e011      	b.n	800168a <HAL_RCC_OscConfig+0x78e>
 8001666:	bf00      	nop
 8001668:	58024400 	.word	0x58024400
 800166c:	58024800 	.word	0x58024800
 8001670:	fffffc0c 	.word	0xfffffc0c
 8001674:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff f940 	bl	80008fc <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e08a      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800168a:	4b47      	ldr	r3, [pc, #284]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x77c>
 8001696:	e082      	b.n	800179e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a42      	ldr	r2, [pc, #264]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 800169e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff f92a 	bl	80008fc <HAL_GetTick>
 80016a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff f926 	bl	80008fc <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e070      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016be:	4b3a      	ldr	r3, [pc, #232]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x7b0>
 80016ca:	e068      	b.n	800179e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80016cc:	4b36      	ldr	r3, [pc, #216]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 80016ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80016d2:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d031      	beq.n	8001744 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f003 0203 	and.w	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d12a      	bne.n	8001744 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d122      	bne.n	8001744 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001708:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d11a      	bne.n	8001744 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0a5b      	lsrs	r3, r3, #9
 8001712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800171a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d111      	bne.n	8001744 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800172c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d108      	bne.n	8001744 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	0e1b      	lsrs	r3, r3, #24
 8001736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e02b      	b.n	80017a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 800174a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001752:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	429a      	cmp	r2, r3
 800175c:	d01f      	beq.n	800179e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 8001760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001762:	4a11      	ldr	r2, [pc, #68]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800176a:	f7ff f8c7 	bl	80008fc <HAL_GetTick>
 800176e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001770:	bf00      	nop
 8001772:	f7ff f8c3 	bl	80008fc <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	4293      	cmp	r3, r2
 800177c:	d0f9      	beq.n	8001772 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 8001780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_RCC_OscConfig+0x8b0>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800178a:	00d2      	lsls	r2, r2, #3
 800178c:	4906      	ldr	r1, [pc, #24]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 800178e:	4313      	orrs	r3, r2
 8001790:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_RCC_OscConfig+0x8ac>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3730      	adds	r7, #48	@ 0x30
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	58024400 	.word	0x58024400
 80017ac:	ffff0007 	.word	0xffff0007

080017b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e19c      	b.n	8001afe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b8a      	ldr	r3, [pc, #552]	@ (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d910      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b87      	ldr	r3, [pc, #540]	@ (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 020f 	bic.w	r2, r3, #15
 80017da:	4985      	ldr	r1, [pc, #532]	@ (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b83      	ldr	r3, [pc, #524]	@ (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e184      	b.n	8001afe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	4b7b      	ldr	r3, [pc, #492]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800180c:	429a      	cmp	r2, r3
 800180e:	d908      	bls.n	8001822 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001810:	4b78      	ldr	r3, [pc, #480]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	4975      	ldr	r1, [pc, #468]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 800181e:	4313      	orrs	r3, r2
 8001820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d010      	beq.n	8001850 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	4b70      	ldr	r3, [pc, #448]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800183a:	429a      	cmp	r2, r3
 800183c:	d908      	bls.n	8001850 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800183e:	4b6d      	ldr	r3, [pc, #436]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	496a      	ldr	r1, [pc, #424]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 800184c:	4313      	orrs	r3, r2
 800184e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d010      	beq.n	800187e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	4b64      	ldr	r3, [pc, #400]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001868:	429a      	cmp	r2, r3
 800186a:	d908      	bls.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800186c:	4b61      	ldr	r3, [pc, #388]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	495e      	ldr	r1, [pc, #376]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 800187a:	4313      	orrs	r3, r2
 800187c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b00      	cmp	r3, #0
 8001888:	d010      	beq.n	80018ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	4b59      	ldr	r3, [pc, #356]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001896:	429a      	cmp	r2, r3
 8001898:	d908      	bls.n	80018ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800189a:	4b56      	ldr	r3, [pc, #344]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4953      	ldr	r1, [pc, #332]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4b4d      	ldr	r3, [pc, #308]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d908      	bls.n	80018da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f023 020f 	bic.w	r2, r3, #15
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4947      	ldr	r1, [pc, #284]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d055      	beq.n	8001992 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80018e6:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4940      	ldr	r1, [pc, #256]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001900:	4b3c      	ldr	r3, [pc, #240]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d121      	bne.n	8001950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0f6      	b.n	8001afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d107      	bne.n	8001928 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001918:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d115      	bne.n	8001950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0ea      	b.n	8001afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d107      	bne.n	8001940 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001930:	4b30      	ldr	r3, [pc, #192]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0de      	b.n	8001afe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d6      	b.n	8001afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001950:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f023 0207 	bic.w	r2, r3, #7
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4925      	ldr	r1, [pc, #148]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 800195e:	4313      	orrs	r3, r2
 8001960:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001962:	f7fe ffcb 	bl	80008fc <HAL_GetTick>
 8001966:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001968:	e00a      	b.n	8001980 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7fe ffc7 	bl	80008fc <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0be      	b.n	8001afe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001980:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	429a      	cmp	r2, r3
 8001990:	d1eb      	bne.n	800196a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d010      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d208      	bcs.n	80019c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f023 020f 	bic.w	r2, r3, #15
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	490e      	ldr	r1, [pc, #56]	@ (80019f4 <HAL_RCC_ClockConfig+0x244>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d214      	bcs.n	80019f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 020f 	bic.w	r2, r3, #15
 80019d6:	4906      	ldr	r1, [pc, #24]	@ (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <HAL_RCC_ClockConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e086      	b.n	8001afe <HAL_RCC_ClockConfig+0x34e>
 80019f0:	52002000 	.word	0x52002000
 80019f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d010      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	4b3f      	ldr	r3, [pc, #252]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d208      	bcs.n	8001a26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a14:	4b3c      	ldr	r3, [pc, #240]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	4939      	ldr	r1, [pc, #228]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d010      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d208      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a42:	4b31      	ldr	r3, [pc, #196]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	492e      	ldr	r1, [pc, #184]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d010      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	4b28      	ldr	r3, [pc, #160]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d208      	bcs.n	8001a82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4922      	ldr	r1, [pc, #136]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d010      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d208      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4917      	ldr	r1, [pc, #92]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ab0:	f000 f834 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	4912      	ldr	r1, [pc, #72]	@ (8001b0c <HAL_RCC_ClockConfig+0x35c>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_RCC_ClockConfig+0x358>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <HAL_RCC_ClockConfig+0x35c>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <HAL_RCC_ClockConfig+0x360>)
 8001ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_RCC_ClockConfig+0x364>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <HAL_RCC_ClockConfig+0x368>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe feb8 	bl	8000868 <HAL_InitTick>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	08001e80 	.word	0x08001e80
 8001b10:	24000004 	.word	0x24000004
 8001b14:	24000000 	.word	0x24000000
 8001b18:	24000008 	.word	0x24000008

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	@ 0x24
 8001b20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b22:	4bb3      	ldr	r3, [pc, #716]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b2a:	2b18      	cmp	r3, #24
 8001b2c:	f200 8155 	bhi.w	8001dda <HAL_RCC_GetSysClockFreq+0x2be>
 8001b30:	a201      	add	r2, pc, #4	@ (adr r2, 8001b38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b36:	bf00      	nop
 8001b38:	08001b9d 	.word	0x08001b9d
 8001b3c:	08001ddb 	.word	0x08001ddb
 8001b40:	08001ddb 	.word	0x08001ddb
 8001b44:	08001ddb 	.word	0x08001ddb
 8001b48:	08001ddb 	.word	0x08001ddb
 8001b4c:	08001ddb 	.word	0x08001ddb
 8001b50:	08001ddb 	.word	0x08001ddb
 8001b54:	08001ddb 	.word	0x08001ddb
 8001b58:	08001bc3 	.word	0x08001bc3
 8001b5c:	08001ddb 	.word	0x08001ddb
 8001b60:	08001ddb 	.word	0x08001ddb
 8001b64:	08001ddb 	.word	0x08001ddb
 8001b68:	08001ddb 	.word	0x08001ddb
 8001b6c:	08001ddb 	.word	0x08001ddb
 8001b70:	08001ddb 	.word	0x08001ddb
 8001b74:	08001ddb 	.word	0x08001ddb
 8001b78:	08001bc9 	.word	0x08001bc9
 8001b7c:	08001ddb 	.word	0x08001ddb
 8001b80:	08001ddb 	.word	0x08001ddb
 8001b84:	08001ddb 	.word	0x08001ddb
 8001b88:	08001ddb 	.word	0x08001ddb
 8001b8c:	08001ddb 	.word	0x08001ddb
 8001b90:	08001ddb 	.word	0x08001ddb
 8001b94:	08001ddb 	.word	0x08001ddb
 8001b98:	08001bcf 	.word	0x08001bcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b9c:	4b94      	ldr	r3, [pc, #592]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ba8:	4b91      	ldr	r3, [pc, #580]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	08db      	lsrs	r3, r3, #3
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	4a90      	ldr	r2, [pc, #576]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001bba:	e111      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001bbe:	61bb      	str	r3, [r7, #24]
      break;
 8001bc0:	e10e      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001bc4:	61bb      	str	r3, [r7, #24]
      break;
 8001bc6:	e10b      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001bca:	61bb      	str	r3, [r7, #24]
      break;
 8001bcc:	e108      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001bce:	4b88      	ldr	r3, [pc, #544]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001bd8:	4b85      	ldr	r3, [pc, #532]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001be2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001be4:	4b82      	ldr	r3, [pc, #520]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001bee:	4b80      	ldr	r3, [pc, #512]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80e1 	beq.w	8001dd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	f000 8083 	beq.w	8001d20 <HAL_RCC_GetSysClockFreq+0x204>
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	f200 80a1 	bhi.w	8001d64 <HAL_RCC_GetSysClockFreq+0x248>
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x114>
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d056      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001c2e:	e099      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c30:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d02d      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	08db      	lsrs	r3, r3, #3
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	4a6b      	ldr	r2, [pc, #428]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c66:	4b62      	ldr	r3, [pc, #392]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001c96:	e087      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001e04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001caa:	4b51      	ldr	r3, [pc, #324]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cbe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001cda:	e065      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001e08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cee:	4b40      	ldr	r3, [pc, #256]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d1e:	e043      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001e0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d32:	4b2f      	ldr	r3, [pc, #188]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d62:	e021      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001e08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d76:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001da6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dac:	0a5b      	lsrs	r3, r3, #9
 8001dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001db2:	3301      	adds	r3, #1
 8001db4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dcc:	ee17 3a90 	vmov	r3, s15
 8001dd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
      break;
 8001dd8:	e002      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ddc:	61bb      	str	r3, [r7, #24]
      break;
 8001dde:	bf00      	nop
  }

  return sysclockfreq;
 8001de0:	69bb      	ldr	r3, [r7, #24]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	58024400 	.word	0x58024400
 8001df4:	03d09000 	.word	0x03d09000
 8001df8:	003d0900 	.word	0x003d0900
 8001dfc:	017d7840 	.word	0x017d7840
 8001e00:	46000000 	.word	0x46000000
 8001e04:	4c742400 	.word	0x4c742400
 8001e08:	4a742400 	.word	0x4a742400
 8001e0c:	4bbebc20 	.word	0x4bbebc20

08001e10 <memset>:
 8001e10:	4402      	add	r2, r0
 8001e12:	4603      	mov	r3, r0
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d100      	bne.n	8001e1a <memset+0xa>
 8001e18:	4770      	bx	lr
 8001e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e1e:	e7f9      	b.n	8001e14 <memset+0x4>

08001e20 <__libc_init_array>:
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	4d0d      	ldr	r5, [pc, #52]	@ (8001e58 <__libc_init_array+0x38>)
 8001e24:	4c0d      	ldr	r4, [pc, #52]	@ (8001e5c <__libc_init_array+0x3c>)
 8001e26:	1b64      	subs	r4, r4, r5
 8001e28:	10a4      	asrs	r4, r4, #2
 8001e2a:	2600      	movs	r6, #0
 8001e2c:	42a6      	cmp	r6, r4
 8001e2e:	d109      	bne.n	8001e44 <__libc_init_array+0x24>
 8001e30:	4d0b      	ldr	r5, [pc, #44]	@ (8001e60 <__libc_init_array+0x40>)
 8001e32:	4c0c      	ldr	r4, [pc, #48]	@ (8001e64 <__libc_init_array+0x44>)
 8001e34:	f000 f818 	bl	8001e68 <_init>
 8001e38:	1b64      	subs	r4, r4, r5
 8001e3a:	10a4      	asrs	r4, r4, #2
 8001e3c:	2600      	movs	r6, #0
 8001e3e:	42a6      	cmp	r6, r4
 8001e40:	d105      	bne.n	8001e4e <__libc_init_array+0x2e>
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
 8001e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e48:	4798      	blx	r3
 8001e4a:	3601      	adds	r6, #1
 8001e4c:	e7ee      	b.n	8001e2c <__libc_init_array+0xc>
 8001e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e52:	4798      	blx	r3
 8001e54:	3601      	adds	r6, #1
 8001e56:	e7f2      	b.n	8001e3e <__libc_init_array+0x1e>
 8001e58:	08001e90 	.word	0x08001e90
 8001e5c:	08001e90 	.word	0x08001e90
 8001e60:	08001e90 	.word	0x08001e90
 8001e64:	08001e94 	.word	0x08001e94

08001e68 <_init>:
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6a:	bf00      	nop
 8001e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e6e:	bc08      	pop	{r3}
 8001e70:	469e      	mov	lr, r3
 8001e72:	4770      	bx	lr

08001e74 <_fini>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	bf00      	nop
 8001e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7a:	bc08      	pop	{r3}
 8001e7c:	469e      	mov	lr, r3
 8001e7e:	4770      	bx	lr
